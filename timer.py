# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'timer.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys       #text,tile,back = #2BAE66,#FCF6F5,#A2A2A1 - GREEEN   #FEE715
from PySide2 import QtCore, QtGui, QtWidgets
from PySide2.QtCore import (QCoreApplication, QPropertyAnimation, QDate, QDateTime, QMetaObject, QObject, QPoint, QRect, QSize, QTime, QUrl, Qt, QEvent)
from PySide2.QtGui import (QBrush, QColor, QConicalGradient, QCursor, QFont, QFontDatabase, QIcon, QKeySequence, QLinearGradient, QPalette, QPainter, QPixmap, QRadialGradient)
from PySide2.QtWidgets import *
import datetime
import os
os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "hide"
from pygame import mixer 


class timeUI(QMainWindow):
    def __init__(self, parent=None):
        super(timeUI, self).__init__()
        self.textColor = "#FEE715"
        self.tileColor = "#1a1a1c"
        self.count = 15

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(430, 306)
        MainWindow.setStyleSheet("QProgressBar{\n"
"border-radius: 20px;\n"
"background-color: #1a1a1c;\n"
"}\n")

        MainWindow.setAttribute(Qt.WA_TranslucentBackground, True)
        MainWindow.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        MainWindow.setWindowFlag(Qt.Tool)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setStyleSheet(
"QProgressBar::chunk{\n"
"border-radius: 20px;\n"
"background-color:#FEE715;\n"
"}")
        self.centralwidget.setObjectName("centralwidget")
        self.progressBar = QProgressBar(self.centralwidget)
        self.progressBar.setGeometry(QRect(10, 10, 411, 281))
        self.progressBar.setStyleSheet("")
        self.progressBar.setProperty("value", 23)
        self.progressBar.setAlignment(Qt.AlignCenter)
        self.progressBar.setTextVisible(False)
        self.progressBar.setOrientation(Qt.Vertical)
        self.progressBar.setInvertedAppearance(False)
        self.progressBar.setTextDirection(QProgressBar.TopToBottom)
        self.progressBar.setObjectName("progressBar")
        self.label = QLabel(self.centralwidget)
        self.label.setGeometry(QRect(120, 120, 191, 61))
        self.label.setAlignment(Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label.setStyleSheet("border-radius: 20px;background-color: #1a1a1c;color:#FEE715;font: 28px \"Franklin Gothic Book\";")
        self.timer = QtCore.QTimer(self.centralwidget)
        self.timer.timeout.connect(self.showTime)
        self.timer.start(1000)
        # QtCore.QTimer.singleShot(1000, lambda: self.exit())

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QMetaObject.connectSlotsByName(MainWindow)

    def convert_to_minutes(self):
        return str(datetime.timedelta(seconds=self.count))

    def showTime(self):
        self.count -= 1
        if self.count == -8:
            sys.exit(app.exec_())
        if self.count == -1:
            self.timerEnded()
            mixer.init()
            mixer.music.load('alarm.wav')
            mixer.music.play()
        elif self.count<0:
            pass
        else:
            if self.count>59:
                text = self.convert_to_minutes()[3:]
            else:
                text = "0:"+str(self.count).zfill(2)
            self.label.setText(text)
        
    def timerEnded(self):
        self.label.setText("Session Ended")
        self.label.setStyleSheet("border-radius: 20px;background-color: #1a1a1c;color:red;font: 28px \"Franklin Gothic Book\";")
        self.centralwidget.setStyleSheet(
"QProgressBar::chunk{\n"
"border-radius: 20px;\n"
"background-color:red;\n"
"}")

    def retranslateUi(self, MainWindow):
        _translate = QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", str(self.count)))

class Ui_MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super(Ui_MainWindow, self).__init__()
        self.ui = timeUI()
        self.ui.setupUi(self)
        self.show()
        self.textColor = "#FEE715"
        self.tileColor = "#1a1a1c"
        self.expand()

    def expand(self):
        # CREATE ANIMATION
        self.animation = QPropertyAnimation(self.ui.progressBar, b"value")
        self.animation.setDuration(15*1000)
        self.animation.setStartValue(0)
        self.animation.setEndValue(100)
        self.animation.start()

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.moveFlag = True
            self.movePosition = event.globalPos() - self.pos()
            self.setCursor(QtGui.QCursor(Qt.OpenHandCursor))
            event.accept()
    def mouseMoveEvent(self, event):
        if Qt.LeftButton and self.moveFlag:
            self.move(event.globalPos() - self.movePosition)
            event.accept()
    def mouseReleaseEvent(self, event):
        self.moveFlag = False
        self.setCursor(Qt.ArrowCursor)



if __name__ == "__main__":
    import sys
    app = QApplication(sys.argv)
    ui = Ui_MainWindow()
    sys.exit(app.exec_())
